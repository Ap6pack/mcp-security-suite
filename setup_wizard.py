#!/usr/bin/env python3
"""
Interactive Setup Wizard for MCP Security Tools Suite
Provides both guided and manual configuration options
"""

import os
import sys
import json
import subprocess
import time
from pathlib import Path
import getpass
import shutil
from typing import Dict, Any, Optional

# ANSI color codes for better UX
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(text: str):
    """Print a formatted header"""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'=' * 60}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text.center(60)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'=' * 60}{Colors.ENDC}\n")

def print_success(text: str):
    """Print success message"""
    print(f"{Colors.GREEN}✓ {text}{Colors.ENDC}")

def print_error(text: str):
    """Print error message"""
    print(f"{Colors.FAIL}✗ {text}{Colors.ENDC}")

def print_warning(text: str):
    """Print warning message"""
    print(f"{Colors.WARNING}⚠ {text}{Colors.ENDC}")

def print_info(text: str):
    """Print info message"""
    print(f"{Colors.CYAN}ℹ {text}{Colors.ENDC}")

def get_claude_config_path() -> Path:
    """Get the Claude Desktop configuration file path based on OS"""
    if sys.platform == "darwin":  # macOS
        return Path.home() / "Library" / "Application Support" / "Claude" / "claude_desktop_config.json"
    elif sys.platform == "win32":  # Windows
        return Path(os.environ["APPDATA"]) / "Claude" / "claude_desktop_config.json"
    else:  # Linux
        return Path.home() / ".config" / "Claude" / "claude_desktop_config.json"

def validate_api_key(key: str, key_type: str) -> bool:
    """Basic validation for API keys"""
    if not key:
        return False
    
    # Basic length and format checks
    if key_type == "HIBP" and len(key) < 20:
        return False
    elif key_type == "SHODAN" and len(key) < 20:
        return False
    elif key_type == "VT" and len(key) < 40:
        return False
    
    return True

def prompt_yes_no(question: str, default: bool = True) -> bool:
    """Prompt user for yes/no answer"""
    default_str = "Y/n" if default else "y/N"
    while True:
        response = input(f"{question} [{default_str}]: ").strip().lower()
        if not response:
            return default
        if response in ['y', 'yes']:
            return True
        if response in ['n', 'no']:
            return False
        print("Please answer 'yes' or 'no'")

def prompt_api_key(key_name: str, key_type: str, optional: bool = True) -> Optional[str]:
    """Prompt for API key with validation"""
    if optional:
        print(f"\n{Colors.CYAN}{key_name} (Optional - press Enter to skip):{Colors.ENDC}")
    else:
        print(f"\n{Colors.CYAN}{key_name} (Required):{Colors.ENDC}")
    
    while True:
        if key_type in ["HIBP", "SHODAN", "VT"]:
            # Use getpass for sensitive input
            key = getpass.getpass(f"Enter {key_name}: ").strip()
        else:
            key = input(f"Enter {key_name}: ").strip()
        
        if not key and optional:
            return None
        
        if validate_api_key(key, key_type):
            return key
        else:
            print_error(f"Invalid {key_name} format. Please try again.")
            if optional and not prompt_yes_no("Do you want to try again?"):
                return None

def create_env_file(api_keys: Dict[str, str]):
    """Create or update .env file with API keys"""
    env_path = Path(".env")
    
    # Backup existing .env if it exists
    if env_path.exists():
        backup_path = Path(".env.backup")
        shutil.copy(env_path, backup_path)
        print_info(f"Backed up existing .env to {backup_path}")
    
    # Write new .env file
    with open(env_path, 'w') as f:
        f.write("# MCP Security Tools Suite - API Keys\n")
        f.write("# Generated by setup wizard\n\n")
        
        for key, value in api_keys.items():
            if value:
                f.write(f"{key}={value}\n")
    
    print_success("Created .env file with API keys")

def create_claude_config(config_path: Path):
    """Create or update Claude Desktop configuration"""
    # Get absolute paths for the servers
    current_dir = Path.cwd()
    
    servers_config = {
        "security-tools": {
            "command": sys.executable,
            "args": [str(current_dir / "security_server.py")]
        },
        "asm-tools": {
            "command": sys.executable,
            "args": [str(current_dir / "asm_server.py")]
        },
        "pentest-tools": {
            "command": sys.executable,
            "args": [str(current_dir / "pentest_server.py")]
        },
        "redteam-tools": {
            "command": sys.executable,
            "args": [str(current_dir / "redteam_server.py")]
        }
    }
    
    # Check if config already exists
    if config_path.exists():
        # Backup existing config
        backup_path = config_path.with_suffix('.json.backup')
        shutil.copy(config_path, backup_path)
        print_info(f"Backed up existing config to {backup_path}")
        
        # Load existing config
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # Update or add mcpServers
        if "mcpServers" not in config:
            config["mcpServers"] = {}
        
        # Ask user about overwriting existing servers
        for server_name, server_config in servers_config.items():
            if server_name in config["mcpServers"]:
                if prompt_yes_no(f"Server '{server_name}' already exists. Overwrite?", default=False):
                    config["mcpServers"][server_name] = server_config
            else:
                config["mcpServers"][server_name] = server_config
    else:
        # Create new config
        config = {"mcpServers": servers_config}
        
        # Create directory if it doesn't exist
        config_path.parent.mkdir(parents=True, exist_ok=True)
    
    # Write config
    with open(config_path, 'w') as f:
        json.dump(config, f, indent=2)
    
    print_success(f"Updated Claude configuration at {config_path}")

def test_servers():
    """Test if servers can start properly"""
    servers = [
        ("Security Server", "security_server.py"),
        ("ASM Server", "asm_server.py"),
        ("Pentest Server", "pentest_server.py"),
        ("Red Team Server", "redteam_server.py")
    ]
    
    print_header("Testing MCP Servers")
    
    results = []
    for server_name, server_file in servers:
        print(f"Testing {server_name}...", end='', flush=True)
        
        try:
            process = subprocess.Popen(
                [sys.executable, server_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            time.sleep(2)
            
            if process.poll() is None:
                print(f" {Colors.GREEN}✓{Colors.ENDC}")
                process.terminate()
                process.wait()
                results.append((server_name, True))
            else:
                stdout, stderr = process.communicate()
                print(f" {Colors.FAIL}✗{Colors.ENDC}")
                if stderr:
                    print(f"  Error: {stderr}")
                results.append((server_name, False))
                
        except Exception as e:
            print(f" {Colors.FAIL}✗{Colors.ENDC}")
            print(f"  Exception: {e}")
            results.append((server_name, False))
    
    # Summary
    passed = sum(1 for _, result in results if result)
    print(f"\n{Colors.BOLD}Summary: {passed}/{len(servers)} servers passed{Colors.ENDC}")
    
    return passed == len(servers)

def guided_setup():
    """Interactive guided setup process"""
    print_header("Guided Setup")
    
    print("This wizard will help you configure the MCP Security Tools Suite.")
    print("We'll set up API keys and create the necessary configuration files.\n")
    
    # Step 1: API Keys
    print(f"{Colors.BOLD}Step 1: API Keys Configuration{Colors.ENDC}")
    print("Some tools require API keys for enhanced functionality.")
    print("All keys are optional, but some features may be limited without them.\n")
    
    api_keys = {}
    
    # HIBP API Key
    print_info("Have I Been Pwned API - For breach database checking")
    print_info("Get your key at: https://haveibeenpwned.com/API/Key")
    api_keys["HIBP_API_KEY"] = prompt_api_key("HIBP API Key", "HIBP", optional=True)
    
    # Shodan API Key
    print_info("\nShodan API - For enhanced reconnaissance")
    print_info("Get your key at: https://account.shodan.io/")
    api_keys["SHODAN_API_KEY"] = prompt_api_key("Shodan API Key", "SHODAN", optional=True)
    
    # VirusTotal API Key
    print_info("\nVirusTotal API - For malware analysis")
    print_info("Get your key at: https://www.virustotal.com/gui/my-apikey")
    api_keys["VT_API_KEY"] = prompt_api_key("VirusTotal API Key", "VT", optional=True)
    
    # Censys API
    print_info("\nCensys API - For internet-wide scanning data")
    print_info("Get your credentials at: https://censys.io/account/api")
    if prompt_yes_no("Do you have Censys API credentials?", default=False):
        api_keys["CENSYS_API_ID"] = input("Enter Censys API ID: ").strip()
        api_keys["CENSYS_API_SECRET"] = getpass.getpass("Enter Censys API Secret: ").strip()
    
    # Create .env file
    if any(api_keys.values()):
        create_env_file({k: v for k, v in api_keys.items() if v})
    else:
        print_warning("No API keys configured. Some features may be limited.")
    
    # Step 2: Claude Configuration
    print(f"\n{Colors.BOLD}Step 2: Claude Desktop Configuration{Colors.ENDC}")
    
    config_path = get_claude_config_path()
    print(f"Claude config location: {config_path}")
    
    if prompt_yes_no("\nDo you want to configure Claude Desktop integration?"):
        create_claude_config(config_path)
    
    # Step 3: Test Servers
    print(f"\n{Colors.BOLD}Step 3: Server Verification{Colors.ENDC}")
    
    if prompt_yes_no("Do you want to test the servers now?"):
        if test_servers():
            print_success("\nAll servers are working properly!")
        else:
            print_warning("\nSome servers failed. Please check the errors above.")
    
    # Final instructions
    print_header("Setup Complete!")
    
    print("Next steps:")
    print("1. If using Claude Desktop, restart the application")
    print("2. The MCP servers should now be available in Claude")
    print("3. You can also use custom_client.py for programmatic access")
    print("\nFor more information, see the README.md file.")

def manual_setup():
    """Manual setup instructions"""
    print_header("Manual Setup Instructions")
    
    print("Follow these steps to manually configure the MCP Security Tools Suite:\n")
    
    print(f"{Colors.BOLD}1. API Keys Configuration (.env file){Colors.ENDC}")
    print("Create a .env file in the project root with the following format:\n")
    
    print(f"{Colors.CYAN}# Optional API Keys")
    print("HIBP_API_KEY=your_have_i_been_pwned_key")
    print("SHODAN_API_KEY=your_shodan_api_key")
    print("VT_API_KEY=your_virustotal_api_key")
    print("CENSYS_API_ID=your_censys_id")
    print(f"CENSYS_API_SECRET=your_censys_secret{Colors.ENDC}\n")
    
    print(f"{Colors.BOLD}2. Claude Desktop Configuration{Colors.ENDC}")
    
    config_path = get_claude_config_path()
    print(f"Edit the file: {config_path}")
    print("\nAdd the following to the 'mcpServers' section:\n")
    
    current_dir = Path.cwd()
    config_example = {
        "mcpServers": {
            "security-tools": {
                "command": "python",
                "args": [f"{current_dir}/security_server.py"]
            },
            "asm-tools": {
                "command": "python",
                "args": [f"{current_dir}/asm_server.py"]
            },
            "pentest-tools": {
                "command": "python",
                "args": [f"{current_dir}/pentest_server.py"]
            },
            "redteam-tools": {
                "command": "python",
                "args": [f"{current_dir}/redteam_server.py"]
            }
        }
    }
    
    print(f"{Colors.CYAN}{json.dumps(config_example, indent=2)}{Colors.ENDC}\n")
    
    print(f"{Colors.BOLD}3. Verify Installation{Colors.ENDC}")
    print("Run: python test_servers.py")
    print("This will verify that all servers can start properly.\n")
    
    print(f"{Colors.BOLD}4. Restart Claude Desktop{Colors.ENDC}")
    print("After updating the configuration, restart Claude Desktop.\n")
    
    # Offer to open config file
    if prompt_yes_no("Would you like to open the configuration file now?", default=False):
        try:
            if sys.platform == "darwin":  # macOS
                subprocess.run(["open", str(config_path)])
            elif sys.platform == "win32":  # Windows
                subprocess.run(["notepad", str(config_path)])
            else:  # Linux
                editor = os.environ.get('EDITOR', 'nano')
                subprocess.run([editor, str(config_path)])
        except Exception as e:
            print_error(f"Could not open file: {e}")
    
    # Offer to test servers
    if prompt_yes_no("\nWould you like to test the servers now?"):
        if test_servers():
            print_success("\nAll servers are working properly!")
        else:
            print_warning("\nSome servers failed. Please check the errors above.")

def main():
    """Main entry point"""
    print_header("MCP Security Tools Suite - Setup Wizard")
    
    print("Welcome to the MCP Security Tools Suite setup wizard!")
    print("This tool will help you configure the MCP servers for use with Claude Desktop.\n")
    
    print("Please select an option:")
    print(f"{Colors.BOLD}1.{Colors.ENDC} Guided Setup (Recommended for new users)")
    print(f"{Colors.BOLD}2.{Colors.ENDC} Manual Setup (For advanced users)")
    print(f"{Colors.BOLD}3.{Colors.ENDC} Test Servers Only")
    print(f"{Colors.BOLD}4.{Colors.ENDC} Exit\n")
    
    while True:
        choice = input("Enter your choice (1-4): ").strip()
        
        if choice == "1":
            guided_setup()
            break
        elif choice == "2":
            manual_setup()
            break
        elif choice == "3":
            test_servers()
            break
        elif choice == "4":
            print("\nExiting setup wizard.")
            break
        else:
            print_error("Invalid choice. Please enter 1, 2, 3, or 4.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(0)
    except Exception as e:
        print_error(f"\nAn error occurred: {e}")
        sys.exit(1)
